// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/eugenshima/PriceService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PriceServiceRepository is an autogenerated mock type for the PriceServiceRepository type
type PriceServiceRepository struct {
	mock.Mock
}

// RedisConsumer provides a mock function with given fields: _a0
func (_m *PriceServiceRepository) RedisConsumer(_a0 context.Context) ([]*model.Share, error) {
	ret := _m.Called(_a0)

	var r0 []*model.Share
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Share); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Share)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPriceServiceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceServiceRepository creates a new instance of PriceServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceServiceRepository(t mockConstructorTestingTNewPriceServiceRepository) *PriceServiceRepository {
	mock := &PriceServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
