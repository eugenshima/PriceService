// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	PriceService "github.com/eugenshima/PriceService/proto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PriceServiceService is an autogenerated mock type for the PriceServiceService type
type PriceServiceService struct {
	mock.Mock
}

// CloseSubscription provides a mock function with given fields: _a0
func (_m *PriceServiceService) CloseSubscription(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestPrice provides a mock function with given fields: ctx
func (_m *PriceServiceService) GetLatestPrice(ctx context.Context) (map[string]float64, error) {
	ret := _m.Called(ctx)

	var r0 map[string]float64
	if rf, ok := ret.Get(0).(func(context.Context) map[string]float64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *PriceServiceService) Publish(_a0 context.Context, _a1 uuid.UUID) ([]*PriceService.Shares, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*PriceService.Shares
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*PriceService.Shares); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PriceService.Shares)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishToAllSubscribers provides a mock function with given fields: ctx
func (_m *PriceServiceService) PublishToAllSubscribers(ctx context.Context) {
	_m.Called(ctx)
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *PriceServiceService) Subscribe(_a0 uuid.UUID, _a1 []string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, []string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPriceServiceService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceServiceService creates a new instance of PriceServiceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceServiceService(t mockConstructorTestingTNewPriceServiceService) *PriceServiceService {
	mock := &PriceServiceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
